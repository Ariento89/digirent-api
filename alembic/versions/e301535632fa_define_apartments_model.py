"""define apartments model

Revision ID: e301535632fa
Revises: 4f5ca20c1ac7
Create Date: 2020-09-30 12:13:43.912463

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from sqlalchemy_utils import UUIDType, ChoiceType
from digirent.database.enums import HouseType

# revision identifiers, used by Alembic.
revision = "e301535632fa"
down_revision = "4f5ca20c1ac7"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "apartments",
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("id", UUIDType(binary=False), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("monthly_price", sa.Float(), nullable=False),
        sa.Column("utilities_price", sa.Float(), nullable=False),
        sa.Column("address", sa.String(), nullable=False),
        sa.Column("country", sa.String(), nullable=False),
        sa.Column("state", sa.String(), nullable=False),
        sa.Column("city", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column(
            "house_type", ChoiceType(HouseType, impl=sa.String()), nullable=False
        ),
        sa.Column("bedrooms", sa.Integer(), nullable=False),
        sa.Column("bathrooms", sa.Integer(), nullable=False),
        sa.Column("size", sa.Float(), nullable=False),
        sa.Column("furnish_type", sa.String(), nullable=False),
        sa.Column("available_from", sa.Date(), nullable=False),
        sa.Column("available_to", sa.Date(), nullable=False),
        sa.Column("amenities", sa.JSON(), nullable=False),
        sa.Column("landlord_id", UUIDType(binary=False), nullable=False),
        sa.Column("tenant_id", UUIDType(binary=False), nullable=True),
        sa.ForeignKeyConstraint(
            ["landlord_id"],
            ["users.id"],
        ),
        sa.ForeignKeyConstraint(
            ["tenant_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.add_column(
        "looking_for", sa.Column("tenant_id", UUIDType(binary=False), nullable=True)
    )
    op.drop_constraint("looking_for_user_id_fkey", "looking_for", type_="foreignkey")
    op.create_foreign_key(None, "looking_for", "users", ["tenant_id"], ["id"])
    op.drop_column("looking_for", "user_id")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "looking_for",
        sa.Column("user_id", postgresql.UUID(), autoincrement=False, nullable=True),
    )
    op.drop_constraint(None, "looking_for", type_="foreignkey")
    op.create_foreign_key(
        "looking_for_user_id_fkey", "looking_for", "users", ["user_id"], ["id"]
    )
    op.drop_column("looking_for", "tenant_id")
    op.drop_table("apartments")
    # ### end Alembic commands ###
